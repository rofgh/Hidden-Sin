
def assess_language(Pa):
    UR = []
    class Node:
        def __init__(self, name, head, phrase, mother, real, top):
            self.name       = name
            # Is this node the head of it's level?
            self.head       = head
            # What larger P is this part of? (CP, SP, IP)
            self.phrase     = phrase
            # Which node is this node's mother?
            self.mother     = mother
            # Is this node realizable?
            self.real       = real
            # Is this node topicalizable?
            self.top        = top
            # This will be generated by the list of mothers
            self.daughters  = []
            # This will be determined by the headedness and the parameter settings: L or R
            self.pos        = None
            # Is this node null in the current UR?  Set after the initial setup, by parameters mostly
            self.null       = True
            # Every node is added to this list--don't worry, we'll sort it out later....
            UR.append(self)

    # Set up all doz nodez brah
    CP      = Node(" CP", False, None, None, False, False)
    Cbar    = Node(" Cbar", False, CP, CP, False, False)
    ka      = Node(" ka", True, CP, Cbar, True, False)
    SP      = Node(" SP", False, CP, Cbar, False, False)
    wa      = Node(" wa", True, CP, Cbar, True, True)
    that    = Node(" that", True, CP, Cbar, False, True)
    Wh      = Node("[+WH]", False, CP, Cbar, True, False)
    S       = Node(" S", True, SP, SP, True, True)
    IP      = Node(" IP", False, SP, SP, False, False)
    Aux     = Node(" Aux", False, IP, IP, True, False)
    NegP    = Node(" NegP", False, IP, IP, False, False)
    Not     = Node(" not", True, IP, NegP, True, False)
    Nev     = Node(" never", True, IP, NegP, True, False)
    VP      = Node(" VP", False, IP, NegP, False, False)
    Adv     = Node(" Adv", True, IP, VP, True, True)
    Vbar3   = Node(" Vbar3", False, IP, VP, False, False)
    Vbar2   = Node(" Vbar2", True, IP, Vbar3, False, False)
    O2      = Node(" O2", False, IP, Vbar2, True, True)
    PP      = Node(" PP", False, IP, Vbar3, False, False)
    P       = Node(" P", True, IP, PP, True, True)
    O3      = Node(" O3", False, IP, PP, True, True)
    Vbar1   = Node(" Vbar1", True, IP, Vbar2, False, True)
    V       = Node(" Verb", True, IP, Vbar1, True, False)
    O1      = Node(" O1", False, IP, Vbar1, True, True)
    
                                        ### HEADEDNESS PARAMETERS ###
    ### PARAMETER 1 ### ONLY AFFECTS HEADEDNESS OF NODES WITHIN SP (i.e. S)
    sps = [x for x in UR if x.phrase == SP]
    # print("\nWHATS IN SP:")
    # [print(x.name) for x in sps]
    if Pa[0] == 0:
        for node in sps:
            if node.head == True:
                node.pos = "L"
            else:
                node.pos = "R"
    if Pa[0] == 1:
        for node in sps:
            if node.head == True:
                node.pos = "R"
            else:
                node.pos = "L"



    ### PARAMETER 2 (Pa[1]) ###  ONLY AFFECTS HEADEDNESS OF NODES WITHIN IP
    ips = [x for x in UR if x.phrase == IP]
    if Pa[1] == 0:
        for node in ips:
            if node.head == True:
                node.pos    = "L"
            else:
                node.pos    = "R" 

    if Pa[1] == 1:
        for node in ips:
            if node.head == True:
                node.pos    = "R"
            else:
                node.pos    = "L"
    # print("\nWHATS IN IP:")
    # [print(x.name,"\t", x.pos) for x in ips]


    ### PARAMETER 3 (Pa[2]) ### ONLY AFFECTS HEADEDNESS OF NODES WITHIN CP
    cps = [x for x in UR if x.phrase == CP]
    # print("\nWHATS IN CP:")
    # [print(x.name) for x in cps]
    if Pa[2] == 0:
        for node in cps:
            if node.head == True:
                node.pos = "L"
            else:
                node.pos = "R"
    if Pa[2] == 1:
        for node in cps:
            if node.head == True:
                node.pos = "R"
            else:
                node.pos = "L"
    '''
                                        ### EXISTENTIAL PARAMETERS ###
    ### PARAMETER 4 (Pa[3]) ### OptTop
    if Pa[3] == 0:
    if Pa[3] == 1:
    ### PARAMETER 5 (Pa[4]) ### Null Subject
    if Pa[4] == 0:
    if Pa[4] == 1:
    ### PARAMETER 6 (Pa[5]) ### Null Topic
    if Pa[5] == 0:
    if Pa[5] == 1:

                                        ### MOVEMENT PARAMETERS ###
    ### PARAMETER 7 (Pa[6]) ### Wh-Movement
    if Pa[6] == 0:
    if Pa[6] == 1:
    ### PARAMETER 8 (Pa[7]) ### Preposition Stranding
    if Pa[7] == 0:
    if Pa[7] == 1:
    ### PARAMETER 9 (Pa[8]) ### Topic Marking
    if Pa[8] == 0:
    if Pa[8] == 1:
    ### PARAMETER 10 (Pa[9]) ### VtoI Movement
    if Pa[9] == 0:
    if Pa[9] == 1:
    ### PARAMETER 11 (Pa[10]) ### ItoC Movement
    if Pa[10] == 0:
    if Pa[10] == 1:
    ### PARAMETER 12 (Pa[11]) ### Affix Hopping
    if Pa[11] == 0:
    if Pa[11] == 1:
    ### PARAMETER 13 (Pa[12]) ### Q-Inv
    if Pa[12] == 0:
    if Pa[12] == 1:
    '''






    for x in UR:
        x.null = False
    # V.null = False
    # P.null = False
    # O3.null= False
    # S.null = False
    # O1.null= False
    # O2.null= False
    # Adv.null = False
    # CP.null = False
    # that.null= False

        



    # generate the daughters
    for x in UR:
        if x.mother:
            y = x.mother
            y.daughters.append(x)
        else:
            pass
        
    def expand(node):
        lis = node.daughters
        if len(lis) != 0:
            for x in lis:
                if x.pos == "L":
                    expand(x)
                if x.pos == "R":
                    pass
            for x in lis:
                if x.pos == "R":
                    expand(x)
                if x.pos == "L":
                    pass
        if len(lis) == 0:
            realize(node)

    def realize(node):
        if node.null == False:
            if node.real == True:
                print(node.name, end = '')
    
    expand(CP)
    print()
    print()
    '''


    f = expand(CP)
    for x in f:
        if x.pos == "L":
            realize(x)
            expand(x)
        if x.pos == "R":
            realize(x)
            expand(x)
    '''

if __name__ == '__main__':
    ### ALL THE PARAMETER SETTINGS ####
    for x in range(0, 8192):
        p_list = []
        for digit in format(x, '013b'):
            if digit == '0':
                p_list.append(0)
            if digit == '1':
                p_list.append(1)
        print("Language "+str(x+1)+": "+str(p_list))
        assess_language(p_list)
